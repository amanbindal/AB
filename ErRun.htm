<!DOCTYPE html>
<html lang="en">

<head>
  <title>Straddle: ER Run Up</title>
  <meta charset="UTF-8">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <div style="display: flex; justify-content: space-between; align-items: center;">
    <h2>&nbspStraddle Pricing &nbsp<span style="color: #DE3163;">BD</span>, <span style="color: #FFAC1C;">BU</span>,
      <span style="color: #6495ED;">TU</span>, <span style="color: #2AAA8A;">TD</span>
    </h2>
    <div style="display: flex; gap: 20px; margin-right: 60px;">
      <button id="themeToggle" class="theme-toggle" style="display: none;">üåô&nbsp‚òÄÔ∏è</button>
      <a href="ErMove.htm" target="_blank" style="text-decoration: none; color: #FFAC1C;">GT_100</a>
      <a href="ErMove100.htm" target="_blank" style="text-decoration: none; color: #6495ED;">LT_100</a>
    </div>
  </div>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: var(--background-color);
      color: var(--text-color);
      transition: all 0.3s ease;
    }

    :root {
      --background-color: #ffffff;
      --text-color: #333333;
    }

    [data-theme="dark"] {
      --background-color: #333333;
      --text-color: #ffffff;
    }

    .light-theme {
      background-color: #ffffff;
      color: #000000;
    }

    .theme-toggle {
      position: fixed;
      margin-right: 8px;
      padding: 8px 8px;
      border-radius: 50%;
      border: none;
      cursor: pointer;
      background: transparent;
    }

    [data-theme="dark"] .theme-toggle span:first-child {
      display: none;
    }

    [data-theme="light"] .theme-toggle span:last-child {
      display: none;
    }

    th,
    td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #333;
      color: white;
    }

    .light-theme th {
      background-color: #eee;
      color: black;
    }

    .toggle-btn {
      padding: 10px;
      margin: 10px;
      cursor: pointer;
      border: none;
      background-color: #444;
      color: white;
    }

    .light-theme .toggle-btn {
      background-color: #ccc;
      color: black;
    }

    /* Use GPU acceleration for animations */
    .animated {
      transform: translateZ(0);
      will-change: transform;
    }

    /* Optimize table rendering */
    #table-wrapper {
      contain: content;
      height: 90vh;
      overflow-y: auto;
    }

    /* Prevent layout shifts */
    table {
      table-layout: fixed;
      width: 100%;
    }

    thead th {
      position: sticky;
      top: 0;
      z-index: 2;
      background-color: #333;
      color: white;
    }

    .light-theme thead th {
      background-color: #eee;
      color: black;
    }

    #earningsTable {
      max-height: 80vh;
      overflow-y: auto;
      width: 100%;
    }

    .highlight-green {
      background-color: #d6fbb1 !important;
    }

    .highlight-orange {
      background-color: #FFECB3 !important;
    }

    .highlight-red {
      background-color: #FFEBEE !important;
    }

    .highlight-blue {
      background-color: #cefcfd !important;
    }

    a,
    a label,
    a:link,
    a:visited,
    a:hover,
    a:active {
      cursor: pointer !important;
      text-decoration: none;
      color: inherit;
    }

    a:hover {
      text-decoration: underline !important;
    }

    td a,
    td a:link,
    td a:visited,
    td a:hover,
    td a:active {
      cursor: pointer !important;
    }

    .spinner-wrapper {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      display: none;
    }

    .spinner {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    .spinnerDone {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #2AAA8A;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .row-selected {
      outline: 2px solid #1976d2 !important;
      background-color: #e3f2fd !important;
    }
  </style>
</head>

<body>
  <div class="spinner-wrapper" id="loadingSpinner">
    <div class="spinner"></div>
  </div>
  <div class="spinner-wrapper" id="doneSpinner" style="display: none;">
    <div class="spinnerDone"></div>
  </div>
  <div id="table-wrapper">
    <table id="earningsTable">
      <thead>
        <tr>
          <th onclick="sortTable(0)">Ticker</th>
          <th onclick="sortTable(1)">ErDate(Nxt)</th>
          <th onclick="sortTable(2)">Rsi</th>
          <th onclick="sortTable(3)">IvRank</th>
          <th onclick="sortTable(4)">Beta</th>
          <th onclick="sortTable(5)">PM/AH</th>
          <th onclick="sortTable(6)">P</th>
          <th onclick="sortTable(7)">Straddle%</th>
          <th onclick="sortTable(8)">HistMove%</th>
          <th onclick="sortTable(9)">ErMove%</th>
          <th onclick="sortTable(10)">Change%</th>
          <th onclick="sortTable(11)">5D%</th>
          <th onclick="sortTable(12)">MA200%</th>
          <th onclick="sortTable(13)">Price</th>
          <th onclick="sortTable(14)">MA5</th>
          <th onclick="sortTable(15)">MA13</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be injected here -->
      </tbody>
    </table>
  </div>
  <script>
    const tickers = [
'AA', 'AAL', 'AAOI', 'AAON', 'AAP', 'AAPL', 'AAT', 'ABBV', 'ABM', 'ABNB', 'ABR', 'ABT', 'ACAD', 'ACCO', 'ACGL', 'ACHR', 'ACI', 'ACLS', 'ACMR', 'ACN', 'ACRE', 'ADBE', 'ADC', 'ADI', 'ADM', 'ADNT', 'ADP', 'ADS', 'ADSK', 'ADT', 'AE', 'AEE', 'AEHR', 'AEIS', 'AEM', 'AEO', 'AEP', 'AES', 'AFCG', 'AFG', 'AFL', 'AFRM', 'AG', 'AGCO', 'AGI', 'AGM', 'AGNC', 'AGO', 'AGR', 'AI', 'AIG', 'AIN', 'AIO', 'AIP', 'AIR', 'AIZ', 'AJG', 'AKAM', 'AL', 'ALB', 'ALC', 'ALE', 'ALG', 'ALGM', 'ALGN', 'ALGT', 'ALK', 'ALKS', 'ALL', 'ALLE', 'ALLY', 'ALNY', 'ALRM', 'ALSN', 'ALV', 'ALXO', 'ALXN', 'AMAT', 'AMBA', 'AMC', 'AMCR', 'AMCX', 'AMD', 'AME', 'AMED', 'AMG', 'AMGN', 'AMH', 'AMK', 'AMKR', 'AMLP', 'AMN', 'AMP', 'AMRC', 'AMRK', 'AMRX', 'AMSF', 'AMT', 'AMWD', 'AMX', 'AMZN', 'AN', 'ANDE', 'ANET', 'ANF', 'ANGI', 'ANGO', 'ANN', 'ANSS', 'ANTM', 'AON', 'AOS', 'AOSL', 'APA', 'APD', 'APLE', 'APLS', 'APO', 'APPN', 'APPS', 'APTV', 'AR', 'ARCC', 'ARCT', 'ARDX', 'ARE', 'ARES', 'ARGX', 'ARI', 'ARIS', 'ARLP', 'ARM', 'ARMK', 'ARNC', 'ARQT', 'ARR', 'ARRY', 'ARVN', 'ARWR', 'ASAN', 'ASGN', 'ASH', 'ASML', 'ASO', 'ASPN', 'ASPS', 'ASTS', 'ATI', 'ATKR', 'ATO', 'ATR', 'AUPH', 'AUR', 'AVAV', 'AVB', 'AVGO', 'AVNT', 'AVNW', 'AVPT', 'AVT', 'AVTR', 'AWK', 'AXL', 'AXON', 'AXP', 'AXS', 'AXSM', 'AZO', 'BA', 'BABA', 'BAC', 'BAH', 'BALL', 'BAM', 'BANC', 'BAND', 'BANR', 'BASE', 'BAX', 'BBW', 'BBWI', 'BBY', 'BCRX', 'BDX', 'BE', 'BEAM', 'BEKE', 'BEN', 'BEPC', 'BG', 'BGC', 'BGS', 'BHVN', 'BIGC', 'BIIB', 'BILI', 'BILL', 'BIRK', 'BJ', 'BJRI', 'BK', 'BKH', 'BKNG', 'BKR', 'BLD', 'BLDR', 'BLK', 'BLMN', 'BLNK', 'BMBL', 'BMRN', 'BMY', 'BNL', 'BNS', 'BOOT', 'BORR', 'BOX', 'BRCC', 'BRCD', 'BRFS', 'BRKR', 'BRO', 'BROS', 'BRSP', 'BRX', 'BRZE', 'BSX', 'BTBT', 'BTDR', 'BTU', 'BURL', 'BVS', 'BWA', 'BWXT', 'BX', 'BXC', 'BXMT', 'BXP', 'BY', 'BYD', 'BYND', 'C', 'CACC', 'CACI', 'CAG', 'CAH', 'CAKE', 'CALM', 'CALX', 'CARR', 'CART', 'CASY', 'CAT', 'CAVA', 'CB', 'CBOE', 'CCI', 'CCJ', 'CCK', 'CCL', 'CCOI', 'CDAY', 'CDE', 'CDNS', 'CDW', 'CE', 'CEG', 'CELC', 'CELH', 'CF', 'CFLT', 'CFG', 'CFR', 'CG', 'CGNX', 'CHGG', 'CHH', 'CHKP', 'CHRD', 'CHRS', 'CHRW', 'CHTR', 'CHWY', 'CI', 'CIEN', 'CIM', 'CINF', 'CIO', 'CIVB', 'CL', 'CLF', 'CLH', 'CLOV', 'CLS', 'CLW', 'CLX', 'CMA', 'CMCO', 'CMCSA', 'CME', 'CMI', 'CMG', 'CNC', 'COF', 'COHR', 'COHU', 'COIN', 'COKE', 'COLD', 'COO', 'COOP', 'COP', 'COST', 'COTY', 'COUR', 'CPNG', 'CPRI', 'CPRT', 'CRC', 'CRM', 'CROX', 'CRSP', 'CRSR', 'CSCO', 'CSX', 'CTRA', 'CTSH', 'CUBE', 'CUZ', 'CVLT', 'CVNA', 'CVRX', 'CVS', 'CVX', 'CW', 'CWEN', 'CWH', 'CWST', 'CXW', 'CZR', 'D', 'DAL', 'DAR', 'DASH', 'DBRG', 'DBX', 'DCGO', 'DCI', 'DCO', 'DD', 'DDD', 'DDOG', 'DE', 'DEA', 'DECK', 'DELL', 'DG', 'DGX', 'DH', 'DHI', 'DK', 'DKL', 'DKNG', 'DKS', 'DLTR', 'DNN', 'DNUT', 'DOCN', 'DOCS', 'DOCU', 'DOLE', 'DOW', 'DPZ', 'DRI', 'DT', 'DUOL', 'DVA', 'DVAX', 'DVN', 'DX', 'DXC', 'DXCM', 'DXPE', 'DY', 'EA', 'EBAY', 'ED', 'EDIT', 'EEM', 'EFA', 'EWZ', 'EXAS', 'EXC', 'EXEL', 'EXP', 'EXPD', 'EXPE', 'EXPI', 'EXR', 'EZU', 'F', 'FANG', 'FAST', 'FBNC', 'FCPT', 'FCX', 'FDMT', 'FDX', 'FE', 'FI', 'FIGS', 'FIS', 'FIVE', 'FLGT', 'FLNC', 'FLNG', 'FLO', 'FMC', 'FN', 'FNB', 'FND', 'FOLD', 'FORM', 'FOUR', 'FOXA', 'FRT', 'FSLR', 'FSLY', 'FTI', 'FTNT', 'FUBO', 'FUTU', 'FVRR', 'FXI', 'FYBR', 'GAP', 'GBDC', 'GBTC', 'GD', 'GE', 'GEHC', 'GEL', 'GEN', 'GENI', 'GEO', 'GERN', 'GFS', 'GILD', 'GLD', 'GLNG', 'GLOB', 'GLW', 'GM', 'GME', 'GNK', 'GNL', 'GNRC', 'GOGO', 'GOOG', 'GOOGL', 'GPRO', 'GRAB', 'GRWG', 'GS', 'GT', 'GTLB', 'GTLS', 'HAIN', 'HAL', 'HALO', 'HASI', 'HBAN', 'HBI', 'HCA', 'HD', 'HES', 'HIG', 'HIW', 'HLT', 'HLX', 'HON', 'HOOD', 'HP', 'HPE', 'HPQ', 'HTZ', 'HUM', 'HUT', 'IBKR', 'IIPR', 'ILMN', 'IMAX', 'IMCR', 'IMGN', 'INCY', 'INDA', 'INDI', 'INFA', 'INFY', 'INMD', 'INSP', 'INTC', 'INTU', 'INVA', 'IONQ', 'IONS', 'IOT', 'IOVA', 'IP', 'IPG', 'IPGP', 'IQ', 'IREN', 'IRM', 'ISRG', 'IVZ', 'IWM', 'IYR', 'JANX', 'JAZZ', 'JBL', 'JBLU', 'JBHT', 'JCI', 'JD', 'JNJ', 'JNPR', 'JPM', 'K', 'KDP', 'KHC', 'KIM', 'KIND', 'KKR', 'KLAC', 'KMB', 'KMX', 'KO', 'KOS', 'KR', 'KRYS', 'KTOS', 'KVUE', 'LAD', 'LAZR', 'LBRT', 'LC', 'LCII', 'LCID', 'LEN', 'LHX', 'LI', 'LLY', 'LMND', 'LMT', 'LNC', 'LNG', 'LNTH', 'LULU', 'LUNR', 'LUV', 'LVS', 'LYB', 'LYFT', 'LYV', 'LZB', 'MA', 'MAC', 'MAG', 'MAR', 'MARA', 'MASI', 'MAT', 'MAXN', 'MBIN', 'MBLY', 'MCD', 'MCHP', 'MCK', 'MDB', 'MDGL', 'MDLZ', 'MDT', 'MELI', 'MET', 'META', 'MGM', 'MGNI', 'MHK', 'MNKD', 'MNST', 'MO', 'MPC', 'MPLX', 'MPW', 'MPWR', 'MRCY', 'MRK', 'MRNA', 'MRTN', 'MRVI', 'MRVL', 'MSFT', 'MSTR', 'MTN', 'MU', 'NBIX', 'NCLH', 'NDAQ', 'NEE', 'NEM', 'NET', 'NFE', 'NFG', 'NFLX', 'NHI', 'NKE', 'NLY', 'NMIH', 'NOC', 'NOG', 'NOV', 'NOVT', 'NOW', 'NRG', 'NSC', 'NTLA', 'NTNX', 'NTR', 'NU', 'NUE', 'NUVL', 'NVAX', 'NVCR', 'NVDA', 'NVO', 'NVTS', 'NXE', 'NXPI', 'NXRT', 'NXST', 'O', 'OCGN', 'ODFL', 'OHI', 'OI', 'OII', 'OKE', 'OKTA', 'OLED', 'OLLI', 'OLN', 'ON', 'ONON', 'ORCL', 'ORLY', 'OVV', 'OXY', 'PAA', 'PACB', 'PACW', 'PANW', 'PAR', 'PARA', 'PATH', 'PAYC', 'PAYX', 'PBF', 'PBR', 'PCAR', 'PCG', 'PCRX', 'PCTY', 'PCVX', 'PDD', 'PENN', 'PEP', 'PFE', 'PFGC', 'PFSI', 'PG', 'PHM', 'PINS', 'PLAY', 'PLTK', 'PLTR', 'PLUG', 'PLUS', 'PM', 'PNC', 'PTON', 'PVH', 'PWR', 'PYPL', 'QCOM', 'QQQ', 'QRVO', 'QS', 'QYLD', 'RACE', 'RAMP', 'RARE', 'RBLX', 'RCKT', 'RDDT', 'RDWR', 'REGN', 'RELY', 'RF', 'RGEN', 'RGLD', 'RH', 'RIG', 'RIO', 'RIOT', 'RITM', 'RIVN', 'RJF', 'RKLB', 'RKT', 'RL', 'RLI', 'RLJ', 'RLX', 'RM', 'RMBS', 'RMD', 'RNG', 'ROKU', 'RRC', 'RSG', 'RTX', 'RUN', 'RVLV', 'RXST', 'RY', 'SABR', 'SAFE', 'SANA', 'SAN', 'SAND', 'SANM', 'SAP', 'SAVA', 'SBAC', 'SBUX', 'SCHD', 'SCHG', 'SCHW', 'SDGR', 'SDRL', 'SE', 'SFIX', 'SGML', 'SHAK', 'SHEL', 'SHLS', 'SHO', 'SHOP', 'SIRI', 'SITM', 'SKX', 'SLB', 'SLG', 'SLGN', 'SLM', 'SMCI', 'SMG', 'SMR', 'SNDK', 'SNOW', 'SNPS', 'SO', 'SOFI', 'SONO', 'SONY', 'SOXL', 'SOXX', 'SPG', 'SPOT', 'SPY', 'SRE', 'SRPT', 'STAA', 'STAG', 'STE', 'STEM', 'STLD', 'STT', 'STWD', 'STX', 'STZ', 'SUI', 'SUNS', 'SWK', 'SWKS', 'SYK', 'T', 'TAP', 'TDG', 'TDOC', 'TDS', 'TDW', 'TEAM', 'TECK', 'TEL', 'TENB', 'TER', 'TFC', 'TGT', 'TJX', 'TKO', 'TLRY', 'TLT', 'TM', 'TMDX', 'TMUS', 'TOL', 'TPG', 'TPR', 'TQQQ', 'TREX', 'TRGP', 'TRIP', 'TROW', 'TRUP', 'TSCO', 'TSLA', 'TSM', 'TTD', 'TTWO', 'TWLO', 'TXN', 'TXRH', 'TXT', 'U', 'UA', 'UAA', 'UAL', 'UBER', 'UBSI', 'UBS', 'UDMY', 'UDR', 'UEC', 'UGI', 'UHAL', 'ULCC', 'ULTA', 'UMC', 'UNFI', 'UNH', 'UNP', 'UPS', 'UPST', 'URI', 'USO', 'UTHR', 'V', 'VAL', 'VALE', 'VCEL', 'VFC', 'VICI', 'VIR', 'VKTX', 'VLTO', 'VLO', 'VLY', 'VMC', 'VNQ', 'VRTX', 'VSCO', 'VST', 'VTRS', 'VWO', 'VZ', 'WBA', 'WBD', 'WDC', 'WDAY', 'WELL', 'WEN', 'WEX', 'WFC', 'WH', 'WING', 'WM', 'WMB', 'WMT', 'WOLF', 'WPC', 'WPM', 'WRB', 'WY', 'WYNN', 'X', 'XLE', 'XLF', 'XOM', 'XPEV', 'XPO', 'XRAY', 'YELP', 'YETI', 'YUM', 'ZBH', 'ZETA', 'ZI', 'ZIM', 'ZM', 'ZS', 'ZTS'
];
    const themeToggle = document.getElementById('themeToggle');
    themeToggle.addEventListener('click', () => {
      document.body.dataset.theme = document.body.dataset.theme === 'dark'
        ? 'light'
        : 'dark';

      // Optional: Save preference to localStorage
      localStorage.setItem('theme', document.body.dataset.theme);
    });

    // Load saved theme preference
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.body.dataset.theme = savedTheme;
    function toPercent(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 0 : (num * 100).toFixed(2);
    }
    function toDecimal(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 0 : num.toFixed(2);
    }
    // Add this function in your script section
    function enableRowHighlighting() {
      document.querySelectorAll('#earningsTable tbody tr').forEach(row => {
        row.onclick = function () {
          // Remove highlight from all rows
          document.querySelectorAll('#earningsTable tbody tr').forEach(r => r.classList.remove('row-selected'));
          // Add highlight to clicked row
          this.classList.add('row-selected');
        };
      });
    }
    function calculateRSI(closes, period = 14) {
      if (closes.length <= period) return null;

      let gains = 0;
      let losses = 0;

      // Initial average gain/loss
      for (let i = 1; i <= period; i++) {
        const delta = closes[i] - closes[i - 1];
        if (delta > 0) gains += delta;
        else losses -= delta;
      }

      let avgGain = gains / period;
      let avgLoss = losses / period;

      // Apply smoothing for the rest
      for (let i = period + 1; i < closes.length; i++) {
        const delta = closes[i] - closes[i - 1];
        const gain = delta > 0 ? delta : 0;
        const loss = delta < 0 ? -delta : 0;

        avgGain = (avgGain * (period - 1) + gain) / period;
        avgLoss = (avgLoss * (period - 1) + loss) / period;
      }

      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
      const rsi = 100 - 100 / (1 + rs);
      return rsi;
    }
    async function fetchWithRetry(url, retries = 3, delay = 1000) {
      for (let i = 0; i < retries; i++) {
        try {
          const res = await fetch(url);
          if (!res.ok) throw new Error('Fetch failed');
          return await res.json();
        } catch (err) {
          if (i === retries - 1) throw err;
          await new Promise(res => setTimeout(res, delay));
        }
      }
    }
    async function getPrices3(ticker) {
      try {
        const proxy = 'https://corsproxy.io/?';
        //const proxy = 'https://thingproxy.freeboard.io/fetch/';
        //const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return {};
      }
    }

    async function getPrices2(ticker) {
      try {
        const proxy = 'https://thingproxy.freeboard.io/fetch/';
        const url = `https://phx.unusualwhales.com/api/gex/${ticker}?timespan=1y`;
        const data = await fetchWithRetry(url);

        // Handle new endpoint schema
        if (data && Array.isArray(data.data)) {
          // Sort by date ascending
          const paired = data.data
            .map(item => ({
              date: new Date(item.date),
              close: parseFloat(item.close)
            }))
            .filter(item => !isNaN(item.close))
            .sort((a, b) => a.date - b.date);

          const recent = paired.slice(-13);
          const price = recent.length ? recent[recent.length - 1].close : 0;
          const ma5 = recent.length >= 5 ? recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5 : 0;
          const ma13 = recent.length === 13 ? recent.reduce((sum, p) => sum + p.close, 0) / 13 : 0;
          const rsi = calculateRSI(paired.map(p => p.close));
          const ma200 = paired.length >= 200 ? paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200 : 0;
          const high52w = paired.length > 0 ? Math.max(...paired.map(p => p.close)) : 0;
          const last63 = paired.slice(-63);
          const high3m = last63.length > 0 ? Math.max(...last63.map(p => p.close)) : 0;

          return { price, ma5, ma13, ma200, rsi, high52w, high3m };
        }
      } catch (err) {
        return await getPrices3(ticker);
      }
    }

    async function getPrices(ticker) {
      try {
        const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://phx.unusualwhales.com/api/gex/${ticker}?timespan=1y`;
        const data = await fetchWithRetry(url);

        // Handle new endpoint schema
        if (data && Array.isArray(data.data)) {
          // Sort by date ascending
          const paired = data.data
            .map(item => ({
              date: new Date(item.date),
              close: parseFloat(item.close)
            }))
            .filter(item => !isNaN(item.close))
            .sort((a, b) => a.date - b.date);

          const recent = paired.slice(-13);
          const price = recent.length ? recent[recent.length - 1].close : 0;
          const ma5 = recent.length >= 5 ? recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5 : 0;
          const ma13 = recent.length === 13 ? recent.reduce((sum, p) => sum + p.close, 0) / 13 : 0;
          const rsi = calculateRSI(paired.map(p => p.close));
          const ma200 = paired.length >= 200 ? paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200 : 0;
          const high52w = paired.length > 0 ? Math.max(...paired.map(p => p.close)) : 0;
          const last63 = paired.slice(-63);
          const high3m = last63.length > 0 ? Math.max(...last63.map(p => p.close)) : 0;

          // Calculate last 5-day percentage change in price
          let pctChange5d = 0;
          if (paired.length >= 5) {
            const close5dAgo = paired[paired.length - 5].close;
            const latestClose = paired[paired.length - 1].close;
            if (close5dAgo !== 0) {
              pctChange5d = ((latestClose - close5dAgo) / close5dAgo) * 100;
            }
          }

          return { price, ma5, ma13, ma200, rsi, high52w, high3m, pctChange5d };
        }
      } catch (err) {
        return await getPrices2(ticker);
      }
    }
    async function fetchEarnings(ticker) {
      try {
        const res = await fetch(`https://phx.unusualwhales.com/api/companies_earnings/historic/${ticker}`);
        const resPrice = await fetch(`https://phx.unusualwhales.com/api/ticker/${ticker}/price/`);
        const resPrice2 = await fetch(`https://phx.unusualwhales.com/api/companies/${ticker}/get_historical_prices?limit=1`);
        const resIvData = await fetch(`https://phx.unusualwhales.com/api/volatility/${ticker}/stats`);
        const resStats = await fetch(`https://phx.unusualwhales.com/api/stock/${ticker}/fundamental/daily_stats`);

        const json = await res.json();
        const jsonPrice = await resPrice.json();
        const jsonPrice2 = await resPrice2.json();
        const jsonIvData = await resIvData.json();
        const jsonStats = await resStats.json();
        if (!json.data || json.data.length === 0) return null;

        var latest = json.data[json.data.length - 1];
        var next = latest;
        // Check if next earnings date is within 1 month
        const nextDate = new Date(next.report_date);
        nextDate.setHours(0, 0, 0, 0); // Set to start of day
        const today = new Date();
        const oneMonthFromNow = new Date();
        oneMonthFromNow.setHours(0, 0, 0, 0)
        oneMonthFromNow.setMonth(today.getMonth() + 1);
        today.setDate(today.getDate() - 1); // minus one day
        today.setHours(0, 0, 0, 0); // Set to start of day

        // Skip if earnings date is not within next month
        if (nextDate >= oneMonthFromNow || nextDate < today) return null;

        // Get last 4 quarters average implied move with 15% addition
        const last4Quarters = json.data.slice(-5, -1); // Exclude the next earnings date
        const avgHistoricMove = last4Quarters
          .map(q => {
            const baseMove = parseFloat(q.expected_move_perc) || 0;
            // Add 15% to each quarter's expected move
            return baseMove + (baseMove * 0.15);
          })
          .filter(move => move > 0)
          .reduce((sum, move, i, arr) => sum + move / arr.length, 0);

        if (!latest.post_earnings_move_3d && json.data.length > 1)
          latest = json.data[json.data.length - 2];

        const beta = jsonStats && jsonStats.data ? parseFloat(jsonStats.data.beta) || 0 : 0;
        const ivRank = jsonIvData && jsonIvData.data ? parseFloat(jsonIvData.data.iv_rank) || 999 : 999;
        const preErPrice = parseFloat(latest.price) || 0;
        const latestPrice = parseFloat(jsonPrice.curr) || parseFloat(jsonPrice.prev) || (jsonPrice2.history.length > 0 ? parseFloat(jsonPrice2.history[0].price) || parseFloat(jsonPrice2.history[0].close_price) : 0);
        const priceChange = ((latestPrice - preErPrice) / preErPrice * 100).toFixed(2);
        const reportTime = next.report_time == 'unknown' || next.report_time == '' || !next.report_time ? '-' : next.report_time == 'premarket' ? 'PM' : next.report_time == 'postmarket' ? 'AH' : next.report_time;

        return {
          ticker: ticker,
          preErPrice: preErPrice || 0,
          price: latestPrice || 0,
          priceChange: priceChange || 0,
          er_date: next.report_date || 'N/A',
          report_date: latest.report_date || 'N/A',
          avgHistoricMove: avgHistoricMove * 100 || 0,
          straddle: toPercent(next.expected_move_perc) || 0,
          expected_move_perc: toPercent(latest.expected_move_perc) || 0,
          post_earnings_move_1d: toPercent(latest.post_earnings_move_1d) || 0,
          report_time: reportTime,
          iv_rank: ivRank,
          beta: beta
        };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return null;
      }
    }

    function updatePriceCells(ticker, priceData, postErMove1d) {
      const row = document.getElementById(`row-${ticker}`);

      // Calculate ratio between MA5 and MA13
      const ratioMa5Ma13 = priceData.ma5 / priceData.ma13;
      const percentDiffMa5Ma13 = Math.abs((ratioMa5Ma13 - 1) * 100);
      // Determine text color based on conditions
      let textColor = 'inherit';
      if (priceData.ma5 >= priceData.ma13) {
        textColor = 'green';
      } else if (percentDiffMa5Ma13 <= 1) {
        textColor = 'red';
      }

      const ma200Ratio = ((priceData.price - priceData.ma200) / priceData.ma200) * 100;

      row.querySelector('.ma5').innerHTML = `<a href="https://marketchameleon.com/Overview/${ticker}" target="_blank" style="color:${textColor};">${priceData.ma5?.toFixed(2)}</a>`;
      row.querySelector('.ma13').innerHTML = `<a href="https://www.tipranks.com/stocks/${ticker}/forecast" target="_blank" style="color:inherit;">${priceData.ma13?.toFixed(2)}</a>`;
      row.querySelector('.ma200').innerHTML = `<a href="https://www.barchart.com/stocks/quotes/${ticker}/overview" target="_blank" style="color:inherit;${priceData.price < priceData.ma200 ? 'color:red;' : 'color:green'}">${ma200Ratio ? ma200Ratio.toFixed(2) : 99}</a>`;
      row.querySelector('.pctChange5d').innerHTML = `${priceData.pctChange5d?.toFixed(2)}`;
      row.querySelector('.rsi').textContent = priceData.rsi.toFixed(2);
      // Add highlights
      if (postErMove1d < 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-orange'); //BU = true;
      if (postErMove1d > 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-green'); //TD = true;
      if (postErMove1d < 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-red'); //BD = true;
      if (postErMove1d > 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-blue'); //TU = true;
    }

    // Utility to check if today is a new business day compared to cached date
    function isNewBusinessDay(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();

      // Check if today is weekend
      if (now.getDay() === 0 || now.getDay() === 6) return false;

      // Check if last fetch was on a different business day
      let prevBusinessDay = new Date(now);
      if (now.getDay() === 1) { // Monday
        prevBusinessDay.setDate(now.getDate() - 3);
      } else if (now.getDay() > 1) {
        prevBusinessDay.setDate(now.getDate() - 1);
      }

      // If last fetch was not today, it's a new business day
      return (
        lastDate.getFullYear() !== now.getFullYear() ||
        lastDate.getMonth() !== now.getMonth() ||
        lastDate.getDate() !== now.getDate()
      );
    }

    // Utility to check if over an hour has passed since last fetch
    function isOverAnHour(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();
      return (now - lastDate) > 60 * 60 * 1000;
    }

    // Cache helpers
    function getCache(key) {
      try {
        return JSON.parse(localStorage.getItem(key));
      } catch {
        return null;
      }
    }
    function setCache(key, value) {
      localStorage.setItem(key, JSON.stringify(value));
    }

    // Wrap fetchEarnings with caching
    async function fetchEarningsCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `Straddle_er_${ticker}`;
      const cached = getCache(cacheKey);

      if (cached && cached.data && cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt) &&
        !isOverAnHour(cached.fetchedAt)) {
        return cached.data;
      }

      spinner.style.display = 'block';
      try {
        const data = await fetchEarnings(ticker);
        if (data) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
        const spinnerDone = document.getElementById('doneSpinner');
        spinner.style.display = 'block';
      }
    }

    async function getPricesCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `Straddle_$_${ticker}`;
      const cached = getCache(cacheKey);

      if (cached && cached.data && cached.data.price && cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt) &&
        !isOverAnHour(cached.fetchedAt)) {
        return cached.data;
      }

      spinner.style.display = 'block';
      try {
        const data = await getPrices(ticker);
        if (data && data.price) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
      }
    }

    // Update renderTable to use cached fetchers in parallel with concurrency control
    async function renderTable() {
      const spinner = document.getElementById('loadingSpinner');
      spinner.style.display = 'block'; // Show spinner

      const tableBody = document.querySelector('#earningsTable tbody');
      tableBody.innerHTML = '';

      // Concurrency limit for network requests
      const CONCURRENCY_LIMIT = 80;
      let index = 0;

      // Helper to render a row immediately from cached data
      function renderRowFromCache(ticker, data) {
        if (!data || !data.expected_move_perc || data.expected_move_perc == null) return;

        var calcPostErMove1d = Math.abs(data.post_earnings_move_1d);
        var straddleCalulated = parseFloat(data.straddle && data.straddle != "N/A" && data.straddle != 0 ? toDecimal(parseFloat(data.straddle) + parseFloat(data.straddle) * 0.15) : 0);
        var expMoveCalulated = parseFloat(data.expected_move_perc && data.expected_move_perc != 0 && data.expected_move_perc != 'N/A' ? toDecimal(parseFloat(data.expected_move_perc) + parseFloat(data.expected_move_perc) * 0.15) : 0);
        if (!data || !straddleCalulated)
          return;
        //<td>${data.avgHistoricMove?.toFixed(2)}</td>
        expMoveCalulated = parseFloat(expMoveCalulated && expMoveCalulated != "N/A" && expMoveCalulated != 0 ? expMoveCalulated : data.avgHistoricMove);
        var p = parseFloat((expMoveCalulated && straddleCalulated && expMoveCalulated > 0 && straddleCalulated > 0 ? parseFloat(((straddleCalulated - expMoveCalulated) / expMoveCalulated) * 100) : 999).toFixed(2));
        const row = `<tr id="row-${ticker}">
                    <td>${ticker}</td>
                    <td>${data.er_date}</td>
                    <td class="rsi">0</td>
                    <td>${parseFloat(data.iv_rank?.toFixed(2))}</td>
                    <td style="${data.beta && data.beta > 1.29 ? 'color:green;' : 'color:inherit;'}">${data.beta ? parseFloat(data.beta.toFixed(2)) : 0}</td>
                    <td>${data.report_time}</td>
                    <td>${p}</td>
                    <td style="${straddleCalulated > 0 && expMoveCalulated >= straddleCalulated ? 'color:green;' : 'color:red'}"><a href="https://unusualwhales.com/stock/${ticker}/earnings" target="_blank" style="color:inherit;">${straddleCalulated}</a></td>
                    <td>${expMoveCalulated}</td>
                    <td>${parseFloat(data.post_earnings_move_1d && data.post_earnings_move_1d != 0 && data.post_earnings_move_1d != 'N/A' ? data.post_earnings_move_1d : 0)}</td>
                    <td class="priceChange"><a href="https://robinhood.com/stocks/${ticker}" target="_blank" style="color:inherit;">${parseFloat(data.priceChange)}</a></td>
                    <td class="pctChange5d">0</td>
                    <td class="ma200">-</td>
                    <td class="price"><a href="https://finviz.com/quote.ashx?t=${ticker}" target="_blank" style="color:inherit;}">${parseFloat(data.price?.toFixed(2))}</a></td>
                    <td class="ma5">-</td>
                    <td class="ma13">-</td>
                  </tr>`;
        tableBody.innerHTML += row;
        enableRowHighlighting();
        // Try to get price data from cache and update cells immediately if available
        const priceCache = getCache(`Straddle_$_${ticker}`);
        if (
          priceCache &&
          priceCache.data &&
          priceCache.price &&
          priceCache.fetchedAt &&
          !isNewBusinessDay(priceCache.fetchedAt) &&
          !isOverAnHour(priceCache.fetchedAt)
        ) {
          updatePriceCells(ticker, priceCache.data, data.post_earnings_move_1d);
        } else {
          // Otherwise, fetch price data in background
          getPricesCached(ticker)
            .then(priceData => updatePriceCells(ticker, priceData, data.post_earnings_move_1d))
            .catch(err => console.error(`Price error for ${ticker}:`, err));
        }
      }

      // Helper to process a batch of tickers (fetching only those not cached/expired)
      async function processBatch(batch) {
        // For each ticker, check if earnings cache is valid
        const uncachedTickers = [];
        const cachedData = [];

        for (const ticker of batch) {
          const cacheKey = `Straddle_er_${ticker}`;
          const cached = getCache(cacheKey);
          if (
            cached &&
            cached.data &&
            cached.fetchedAt &&
            !isNewBusinessDay(cached.fetchedAt) &&
            !isOverAnHour(cached.fetchedAt)
          ) {
            cachedData.push({ ticker, data: cached.data });
          } else {
            uncachedTickers.push(ticker);
          }
        }

        // Render cached rows immediately
        for (const { ticker, data } of cachedData) {
          renderRowFromCache(ticker, data);
        }

        // Fetch uncached earnings in parallel (with concurrency limit)
        for (let i = 0; i < uncachedTickers.length; i += CONCURRENCY_LIMIT) {
          const subBatch = uncachedTickers.slice(i, i + CONCURRENCY_LIMIT);
          const earningsResults = await Promise.all(
            subBatch.map(ticker => fetchEarningsCached(ticker).catch(() => null))
          );

          for (let j = 0; j < subBatch.length; j++) {
            const ticker = subBatch[j];
            const data = earningsResults[j];
            renderRowFromCache(ticker, data);
          }
        }
      }

      // Process all tickers in batches
      try {
        while (index < tickers.length) {
          const batch = tickers.slice(index, index + CONCURRENCY_LIMIT);
          await processBatch(batch);
          index += CONCURRENCY_LIMIT;
          await new Promise(res => setTimeout(res, 200));
        }

        // Automatically sort by report date (column index 5)
        sortTable(2);
        enableRowHighlighting();
      } finally {
        spinner.style.display = 'none'; // Hide spinner when done or on error
      }
    }

    function sortTable(columnIndex, descending = false) {
      const table = document.getElementById("earningsTable");
      const tbody = table.tBodies[0];
      const rows = Array.from(tbody.rows);

      // Detect column type
      const isDate = columnIndex === 1; // ErDate(Nxt)
      const isNumeric = columnIndex !== 0 && columnIndex !== 1;

      const sortedRows = rows.sort((a, b) => {
        const valA = a.cells[columnIndex].textContent.trim();
        const valB = b.cells[columnIndex].textContent.trim();

        if (isDate) {
          // Try to parse as date (supports formats like YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY)
          const dateA = Date.parse(valA.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3-$1-$2')) || Date.parse(valA);
          const dateB = Date.parse(valB.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3-$1-$2')) || Date.parse(valB);
          return dateA - dateB;
        } else if (isNumeric) {
          return parseFloat(valA.replace('%', '')) - parseFloat(valB.replace('%', ''));
        } else {
          return valA.localeCompare(valB);
        }
      });

      if (descending || tbody.getAttribute('data-sorted') === `${columnIndex}-asc`) {
        sortedRows.reverse();
        tbody.setAttribute('data-sorted', `${columnIndex}-desc`);
      } else {
        tbody.setAttribute('data-sorted', `${columnIndex}-asc`);
      }

      tbody.innerHTML = '';
      sortedRows.forEach(row => tbody.appendChild(row));
    }

    renderTable();

  </script>
</body>


</html>